services:
  # Moodle Application Service
  moodle:
    image: moodlehq/moodle-php-apache:8.2
    container_name: moodle
    ports:
      - "8080:80"
    volumes:
      - ./moodle:/var/www/html
      - moodle_data:/var/www/moodledata
    networks:
      - backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./env/.env.moodle

  # FastAPI Application for RAG
  fastapi:
    build:
      context: ..
      dockerfile: docker/minirag/Dockerfile
    container_name: fastapi
    ports:
      - "8000:8000"
    volumes:
      - fastapi_data:/app/assets
    networks:
      - backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./env/.env.app

  # Nginx Service
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - fastapi
      - moodle
    networks:
      - backend
    restart: always

  # PostgreSQL Service (formerly pgvector)
  postgres:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: pgvector
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./env/.env.postgres
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

#  # Qdrant (VectorDB)
 # qdrant:
  #  image: qdrant/qdrant:latest
   # container_name: qdrant
  #  ports:
  #    - "6333:6333"
  #    - "6334:6334"
  #  volumes:
  #    - qdrant_data:/qdrant/storage
  #  networks:
  #    - backend
  #  restart: always

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - ./env/.env.grafana
    depends_on:
      - prometheus
    networks:
      - backend
    restart: always

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - backend
    restart: always

  # PostgreSQL Exporter for Postgres metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    env_file:
      - ./env/.env.postgres-exporter
    depends_on:
      - postgres
    networks:
      - backend
    restart: always

  # pgAdmin Service for PostgreSQL GUI
  #pgadmin:
  #  image: dpage/pgadmin4
  #  container_name: pgadmin
  #  ports:
  #    - "5050:80"
  #  volumes:
  #    - pgadmin_data:/var/lib/pgadmin
  #  env_file:
  #    - ./env/.env.pgadmin
  #  networks:
  #    - backend
  #  restart: always
  #  depends_on:
  #    postgres:
  #      condition: service_healthy
  #uploader:
  #  build:
  #    context: ./uploader
  #  container_name: uploader
  #  depends_on:
  #    - postgres
  #    - fastapi
  #   environment:
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_NAME: minirag
  #     DB_USER: postgres
  #     DB_PASS: minirag2222
  #     COURSE_ID: 4
  #     MOODLEDATA: /moodledata
  #     FASTAPI_HOST: fastapi
  #     FASTAPI_PORT: 8000
  #  volumes:
  #    - moodle_data:/moodledata:ro
  #  networks:
  #    - backend

# Networks definition
networks:
  backend:
    driver: bridge

# Volumes definition
volumes:
  moodle_data:
  fastapi_data:
  postgres_data:
#  qdrant_data:
  prometheus_data:
  grafana_data:
#  pgadmin_data:
