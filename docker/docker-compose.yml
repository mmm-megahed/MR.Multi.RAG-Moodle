services:
  # Moodle Application Service
  moodle:
    image: moodlehq/moodle-php-apache:8.2
    container_name: moodle
    ports:
      - "8080:80"
    volumes:
      - ./moodle:/var/www/html
      - moodle_data:/var/www/moodledata
    networks:
      - backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./env/.env.moodle

  # FastAPI Application for RAG (Web Server)
  fastapi:
    build:
      context: ..
      dockerfile: docker/minirag/Dockerfile
    container_name: fastapi
    ports:
      - "8000:8000"
    volumes:
      # Mount the 'src' directory into the container's 'app' directory
      - ../src:/app
    networks:
      - backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ./env/.env.app
    # The command to run the web server via the entrypoint script
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # NEW: Redis Service for Celery Broker
  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - backend
    restart: always

  # NEW: Celery Worker Service for background jobs
  worker:
    build:
      context: ..
      dockerfile: docker/minirag/Dockerfile
    container_name: worker
    volumes:
      # Mount the 'src' directory so the worker can see the task code
      - ../src:/app
      # Also mount moodledata so it can access the video files
      - moodle_data:/moodledata
    networks:
      - backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ./env/.env.app
    # This command starts the Celery worker via the entrypoint script.
    # It correctly points to your tasks.py file inside the 'routes' folder.
    command: celery -A routes.tasks.celery_app worker --loglevel=info
    
  worker_images:
    build:
      context: ..
      dockerfile: docker/minirag/Dockerfile
    container_name: worker_images
    volumes:
      - ../src:/app
      - moodle_data:/moodledata
    networks:
      - backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - ./env/.env.app
    command: celery -A routes.tasks_images.celery_app worker --loglevel=info

  # Nginx Service
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - fastapi
      - moodle
    networks:
      - backend
    restart: always

  # PostgreSQL Service
  postgres:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: pgvector
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./env/.env.postgres
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - ./env/.env.grafana
    depends_on:
      - prometheus
    networks:
      - backend
    restart: always

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - backend
    restart: always

  # PostgreSQL Exporter for Postgres metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    env_file:
      - ./env/.env.postgres-exporter
    depends_on:
      - postgres
    networks:
      - backend
    restart: always

# Networks definition
networks:
  backend:
    driver: bridge

# Volumes definition
volumes:
  moodle_data:
  fastapi_data:
  postgres_data:
  prometheus_data:
  grafana_data:
